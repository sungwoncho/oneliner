require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe OnelinesController, :type => :controller do
  render_views

  let(:json) { JSON.parse(response.body, symbolize_names: true) }

  let!(:new_york) { create(:oneline, subject: 'New York') }
  let!(:newage) { create(:oneline, subject: 'Newage') }
  let!(:rum_ham) { create(:oneline, subject: 'Rum Ham') }

  def extract_subject
    ->(object) { object[:subject] }
  end

  describe 'GET index' do

    context 'without keyword' do
      before :each do
        get :index, format: :json
      end

      it 'returns 200 status' do
        expect(response.status).to eq 200
      end

      it 'returns all onelines' do
        expect(json.map(&extract_subject)).to match_array(['New York', 'Newage', 'Rum Ham'])
      end
    end

    context 'with keyword' do
      before :each do
        get :index, format: :json, keyword: 'new'
      end

      it 'returns 200 status' do
        expect(response.status).to eq 200
      end

      it 'returns oneline with matching subjects' do
        expect(json.map(&extract_subject)).to match_array(['New York', 'Newage'])
      end
    end
  end

  describe 'GET show' do

    before :each do
      get :show, id: new_york, format: :json
    end

    it 'returns 200 status' do
      expect(response.status).to eq 200
    end

    context 'when exists' do
      it 'returns the oneline' do
        expect(json[:subject]).to eq 'New York'
      end
    end

    context 'when does not exist' do
      it 'returns 404 status' do
        get :show, id: 100, format: :json
        expect(response.status).to eq 404
      end
    end
  end

  describe 'POST create' do

    context 'when successful' do

      before :each do
        post :create, format: :json, oneline: attributes_for(:oneline, subject: 'Friday')
      end

      it 'creates a new oneline' do
        expect {
          post :create, format: :json, oneline: attributes_for(:oneline)
        }.to change(Oneline, :count).by(1)
      end

      it 'returns 204 status' do
        expect(response.status).to eq 204
      end

      it 'returns the location of the created oneline' do
        expect(response.location).to eq oneline_url(Oneline.last)
      end
    end

    context 'when unsuccessful' do
      before :each do
        post :create, format: :json, oneline: attributes_for(:oneline, subject: nil)
      end

      it 'returns 422 status' do
        expect(response.status).to eq 422
      end
    end
  end

  describe 'DELETE destroy' do

    context 'when exists' do
      it 'destroys the record' do
        expect {
          delete :destroy, format: :json, id: new_york
        }.to change(Oneline, :count).by(-1)
      end

      it 'returns 204 status' do
        delete :destroy, format: :json, id: new_york
        expect(response.status).to eq 204
      end
    end

    context 'when does not exist' do
      it 'returns 404 status' do
        delete :destroy, format: :json, id: 100
        expect(response.status).to eq 404
      end
    end
  end
end
